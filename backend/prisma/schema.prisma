datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                 @id @default(autoincrement()) // Unique numeric identifier
  name              String
  email             String              @unique // Enforce unique email addresses
  password          String
  gender            String?
  birthTimestamp    DateTime?
  birthCity         String?
  birthCountry      String?
  birthLongitude    String?
  birthLatitude     String?
  photos            String[] // Array of photo URLs
  description       String?
  createdAt         DateTime            @default(now()) // Automatically set creation time
  updatedAt         DateTime            @updatedAt // Automatically update on record modification
  PlanetaryPosition PlanetaryPosition[]
  Preference        Preference?
  isDeleted         Boolean             @default(false)

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  matchesAsUser1   Match[]   @relation("User1Matches")
  matchesAsUser2   Match[]   @relation("User2Matches")

  @@index([email]) // Index for faster lookups by email
  @@map("users") // Optional: map model to a specific table name (e.g., `users`)
}

model PlanetaryPosition {
  id           Int      @id @default(autoincrement())
  userId       Int
  sunSign      String
  moonSign     String
  ascendant    String
  sunPosition  String
  moonPosition String
  mercury      String
  venus        String
  mars         String
  jupiter      String
  saturn       String
  uranus       String
  neptune      String
  pluto        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("planetary_positions")
}

model Preference {
  id             Int        @id @default(autoincrement())
  userId         Int        @unique
  minAge         Int?
  maxAge         Int?
  currentCity    String?
  currentCountry String?
  gender         Gender?
  sunSign        String?
  moonSign       String?
  goals          Goal[]     @relation("PreferenceGoals")
  interests      Interest[] @relation("PreferenceInterests")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("preferences")
}

model Goal {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  preferences Preference[] @relation("PreferenceGoals")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("goals")
}

model Interest {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  preferences Preference[] @relation("PreferenceInterests")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("interests")
}

model Match {
  id            Int      @id @default(autoincrement())
  userId1       Int
  userId2       Int
  synastryScore Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isAccepted    Boolean  @default(false)
  isDeleted     Boolean  @default(false)

  user1 User @relation("User1Matches", fields: [userId1], references: [id])
  user2 User @relation("User2Matches", fields: [userId2], references: [id])

  @@index([userId1, userId2]) // Optional: to improve lookup performance
  @@map("matches")
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  createdAt   DateTime @default(now())

  sender    User @relation("SentMessages", fields: [senderId], references: [id])
  recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id])

  @@index([senderId, recipientId])
  @@map("messages")
}

enum Gender {
  male
  female
  other
}
